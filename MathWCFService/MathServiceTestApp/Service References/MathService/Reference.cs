//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MathServiceTestApp.MathService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMathService")]
    public interface IMathService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        int Add(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Subtract", ReplyAction="http://tempuri.org/IMathService/SubtractResponse")]
        int Subtract(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Subtract", ReplyAction="http://tempuri.org/IMathService/SubtractResponse")]
        System.Threading.Tasks.Task<int> SubtractAsync(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiple", ReplyAction="http://tempuri.org/IMathService/MultipleResponse")]
        int Multiple(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiple", ReplyAction="http://tempuri.org/IMathService/MultipleResponse")]
        System.Threading.Tasks.Task<int> MultipleAsync(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
        int Divide(int no1, int no2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int no1, int no2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathServiceChannel : MathServiceTestApp.MathService.IMathService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathServiceClient : System.ServiceModel.ClientBase<MathServiceTestApp.MathService.IMathService>, MathServiceTestApp.MathService.IMathService {
        
        public MathServiceClient() {
        }
        
        public MathServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int no1, int no2) {
            return base.Channel.Add(no1, no2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int no1, int no2) {
            return base.Channel.AddAsync(no1, no2);
        }
        
        public int Subtract(int no1, int no2) {
            return base.Channel.Subtract(no1, no2);
        }
        
        public System.Threading.Tasks.Task<int> SubtractAsync(int no1, int no2) {
            return base.Channel.SubtractAsync(no1, no2);
        }
        
        public int Multiple(int no1, int no2) {
            return base.Channel.Multiple(no1, no2);
        }
        
        public System.Threading.Tasks.Task<int> MultipleAsync(int no1, int no2) {
            return base.Channel.MultipleAsync(no1, no2);
        }
        
        public int Divide(int no1, int no2) {
            return base.Channel.Divide(no1, no2);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int no1, int no2) {
            return base.Channel.DivideAsync(no1, no2);
        }
    }
}
